<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Auth\RequestGuard;
use App\Pentester;
use Illuminate\Support\Facades\DB;
use App\Client;
use Mail;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use App\CV;
use Illuminate\Support\Carbon;
use App\Job;
use App\Project;
use App\Message;
use App\Discusion;
use App\Bid;
use Intervention\Image\Facades\Image;
use App\Question;


class PentesterController extends Controller
{
    //

    public function getQuestions()
    {
        $questions = Question::inRandomOrder()->take(10)->get();
        foreach($questions as $question){
            $answers = array();
            array_push($answers,$question->answ1,$question->answ2,$question->answ3,$question->answ4);
            $question->answers = $answers;
        }
        return $questions;
    }
    
    public function bidOnJob(Request $request)
    {
        $job=Job::where('id',$request->id)->first();
        $amount=$request->bid_price;
        $desc=$request->desc;
        $client=$job->client->id;

        $message=new Message;
        $discusion=new Discusion;

        $discusion->pentester_id=Auth::guard('pentester')->user()->id;
        $discusion->client_id=$client;
        $discusion->job_id=$job->id;
        $discusion->save();

        $message->discusion_id=$discusion->id;
        $message->pentesterToClient=1;
        $msg=Auth::guard('pentester')->user()->username.' has just bidded on your job.'.$amount."/".$request->maximum_price.Auth::guard('pentester')->user()->email . 'Description:'. $request->bid_desc;
        $msg_arr = array();
        array_push($msg_arr,$msg);
        $message->text = json_encode($msg_arr);
        $message->first = 1;
        $message->save();

        $bid=new Bid;
        $bid->amount=$request->bid_price;
        $bid->job_id=$request->id;
        $bid->description=$request->bid_desc;
        $bid->deadline=$request->bid_deadline;
        $bid->pentester_id=Auth::guard('pentester')->user()->id;
        $bid->save();
   
    }
    public function uploadAvatar(Request $request)
    {
        

        
        $image=$request->avatar;
        $client=Auth::guard('pentester')->user();
        $fileName=Carbon::now()->toDateTimeString().'.'.$image->getClientOriginalExtension();
        $fileName=str_replace(' ','_',$fileName);
        $fileName=str_replace(':','_',$fileName);
        Image::make($image)->resize(300,300)->save(public_path('uploads\\images\\'.$fileName));
        $client->image_path='public\\uploads\\images\\'.$fileName;
        $client->save();
        return 'public\\uploads\\images\\'.$fileName;
    }

    public function viewMyBids(Request $request)
    {
        $allBidsWithJobsFromTable=DB::table('jobs')
                        ->select('jobs.title','jobs.description','jobs.domain','bids.accepted','bids.amount','jobs.client_id')
                        ->where('bids.pentester_id',Auth::guard('pentester')->user()->id)
                        ->join('bids','jobs.id','=','bids.job_id')
                        ->get();
       // return $allBidsWithJobsFromTable;
        $allBids=[];
        foreach($allBidsWithJobsFromTable as $bid)
        {   
            
            $toArray=[
                'title'=>$bid->title,
                'description'=>$bid->description,
                'amount'=>$bid->amount,
                'accepted'=>$bid->accepted,
                'client'=>Client::where('id',$bid->client_id)->first()->name,
                'domain'=>$bid->domain,
            ];
            array_push($allBids,$toArray);
        }
        return $allBids;

    }


    public function register(Request $request)
    {
     $request->validate([
         'email'    =>'required',
         'password' =>'required',
         'sameaspw'=>'required'
     ]);
 
     if(pentester::where('email', '=', $request->email)->count()>0) {
         return 'This mail already exist';
         }
     if (!strcmp($request->password, $request->sameaspw )) {
         $pentester= new Pentester;
         $pentester->tokens=0;
         $pentester->skills=json_encode($request->skills);
         $pentester->username=$request->username;
         $pentester->firstname=$request->firstname;
         $pentester->lastname=$request->lastname;
         $pentester->email = $request->email;
         $pentester->password = Hash::make($request->password);
         $pentester->remember_token=str_random(100);
         $pentester->image_path = 'public\uploads\images\avatar_pentester.png';
         
         $pentester->confirmation_code=str_random(30);
         $this->passwordResetEmail=$request->email;
       
         $confirmation_code=$pentester->confirmation_code;
        
         Mail::send('verifyPen',['confirmation_code'=>$confirmation_code], function($message){
             
             $message->to($this->passwordResetEmail);
             $message->subject('Verify your email');
         
         });
         $pentester->save();
      
      }
     }
 
     public function verifyAccount($token)
     {
         $pentester=Pentester::where('confirmation_code',$token)->first();
         if(!$pentester)
         {
             return "User does not exist";
         }
         $pentester->confirmed=1;
         $pentester->confirmation_code=null;
         $pentester->save();
         return redirect('/');
     }

    public function login(Request $request)
    {
        logger($request);
        $email=$request->email;
        $password=$request->pw;
        $user=Pentester::where('email',$email)->first();
        if($user)
        {
            if($user->confirmed===0)
            {
                if($user->created_at==$user->updated_at){
                    return 'Please verify your account';                
                }else{
                    return 'Your account is suspended';
            }

        }
        
        if(Auth::guard('pentester')->attempt(['email'=>$email,'password'=>$password]))
        {
            
            $pentester=Auth::guard('pentester')->user();
            if($pentester->image_path===null){
                $avatar = 'public\uploads\images\avatar_pentester.png';
            }else{
                $avatar = $pentester->image_path;
            }
            $toReturn=['pentester',$pentester];
            $toReturn=['role'=>'pentester',
            'id'=>$pentester->id,
            'name'=>$pentester->name,
            'email'=>$pentester->email,
            'username'=>$pentester->username,
            'lastname'=>$pentester->lastname,
            'tokens'=>$pentester->tokens,
            'skills'=>$pentester->skills,
            'avatar'=>$avatar,

             ];


            return $toReturn;
            
        }
        else
        {
           
            return 'Wrong username or password';
                  
        }
       }
      return 'User does not exist';
    }

    public function logout()
    {
        if(Auth::guard('pentester')->check())
        {
            Auth::guard('pentester')->logout();
            return view('lender');

        }
    }

    public function resetPw(Request $request)
    {
        $pen=Auth::guard('pentester')->user();
        $pen->password=Hash::make($request->send['newpw']);
        $pen->save();
        return $request->send['newpw'];
    }
    public function postDesc(Request $request)
    {
        $pen=Auth::guard('pentester')->user();
        $pen->description=$request->send;
        $pen->save();
        return $pen->description;
    }
    public function uploadCv(Request $request)
    {
        $cv=$request->cv;

        $dirName=Auth::guard('pentester')->user()->name.Auth::guard('pentester')->user()->id;
        Storage::makeDirectory($dirName);
        $fileName=$dirName.'/'.Auth::guard('pentester')->user()->name.$cv->getClientOriginalExtension();
        Storage::put($fileName,$cv);
        $cvDB=CV::where('pentester_id',Auth::guard('pentester')->user()->id)->first();
        $cvDB->file_path=storage_path($fileName);
        $cvDB->save();

    }

    public function uploadImage(Request $request)
    {
        $this->validate($request, [
            'input_img' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);
        $image=$request->image;

        $dirName=Auth::guard('pentester')->user()->name.Auth::guard('pentester')->user()->id;
        Storage::makeDirectory($dirName);
        $fileName=$dirName.'/'.Auth::guard('pentester')->user()->name.$image->getClientOriginalExtension();
        Storage::put($fileName,$image);
        $imageDB=CV::where('pentester_id',Auth::guard('pentester')->user()->id)->first();
        $imageDB->image_path=storage_path($fileName);
        $imageDB->save();

    }

    public function postPentesterDetails(Request $request)
    {
       
       $cv=new CV;
       $cv->biography=$request->bio;
       $cv->skills=$request->skills;
       $cv->education=$request->education;
       $cv->pentester_id=Auth::guard('pentester')->user()->id;

        $image=$request->avatar;
        
        $dirName=Auth::guard('pentester')->user()->username.'_'.Auth::guard('pentester')->user()->id;
        Storage::makeDirectory($dirName);
        // $fileName=Carbon::now()->toDateTimeString().'.'.$image->getClientOriginalExtension();
        // $fileName=str_replace(' ','_',$fileName);
        // $fileName=str_replace(':','_',$fileName);
        // Storage::putFileAs($dirName,$image,$fileName);
        $cv->image_path='storage_path';
        
       $cv->save();

    }

    public function completeJob(Request $request)
    {
        $pentester = Auth::guard('pentester')->user();
        $job = Job::where('id',$request->job_id)->first();

        // $job->pentesters()->updateExistingPivot($pentester->id,['finished'=>1,'started'=>0]);
        // $job->pentesters()->updateExistingPivot($job->id,['finished'=>1,'started'=>0]);
        // $job->pentesters()->attach($pentester,['amount'=>$bid->amount,'started'=>1]);        

        $job_pivot = $job->pentesters()->where('pentesters_jobs.job_id',$request->job_id)->first()->pivot;
        // $job_pivot->started = 0;
        $job_pivot->finished = 1;
        $job_pivot->save();

        $message = new Message();
        $msg_arr = array();
        array_push($msg_arr,$request->description);
        $message->text = json_encode($msg_arr);
        $message->last = 1;
        $message->pentesterToClient = 1;
        $message->discusion_id = $job->discusion->id;

        $file = $request->addedInfo;
        if($file!==null){
            $dirName='discusion'.$job->discusion->id;
            Storage::makeDirectory($dirName);
            $fileName=Carbon::now()->toDateTimeString().'.'.$file->getClientOriginalExtension();
            $fileName=str_replace(' ','_',$fileName);
            $fileName=str_replace(':','_',$fileName);
            Storage::putFileAs($dirName,$image,$fileName);
            $message->file_url=storage_path('app\\'.$dirName.'\\'.$fileName);
        }
        $message->save();
        

        return $job->pentesters()->get();
    }

    public function myJobs(Request $request)
    {
        $pentester = Auth::guard('pentester')->user();
        $jobs = $pentester->jobs()->where('pentesters_jobs.pentester_id',$pentester->id)->get();
        return $jobs;       
    }

    public function postPortfolio(Request $request)
    {
        $pentester = Auth::guard('pentester')->user();
        $project = new Project;
        $project->pentester_id = $pentester->id;
        $project->title = $request->title;
        $project->date_from = $request->date_from;
        $project->date_to = $request->date_to;
        $project->description = $request->description;

        $file = $request->file;
        if($file!==null){
            if(!Storage::exists($dirName)) {
                $dirName=Auth::guard('pentester')->user()->username.'_'.Auth::guard('pentester')->user()->id;
                Storage::makeDirectory($dirName);
            }
            $fileName=Carbon::now()->toDateTimeString().'.'.$file->getClientOriginalExtension();
            $fileName=str_replace(' ','_',$fileName);
            $fileName=str_replace(':','_',$fileName);
            Storage::putFileAs($dirName,$image,$fileName);
            $project->file_path=storage_path('app\\'.$dirName.'\\'.$fileName);
        }
        $project->save();
        $project->status=200;
        return $project;
    }

    public function getMyProfile()
    {
        $pentester = Auth::guard('pentester')->user();
        $cv = $pentester->cv;
        $projects = $pentester->projects()->get();
        $jobs = $pentester->ratingsFromClients()->get();

        $profile = [
            "pentester" => $pentester,
            // "cv"        => $cv,
            "projects"  => $projects,
            "jobs"      => $jobs
        ];

        return $profile;

    }

    public function getProfile($id)
    {
        $pentester = Pentester::where('id',$id)->first();
        $cv = $pentester->cv;
        $projects = $pentester->projects()->get();
        $jobs = $pentester->ratingsFromClients()->get();

        $profile = [
            "pentester" => $pentester,
            // "cv"        => $cv,
            "projects"  => $projects,
            "jobs"      => $jobs
        ];

        return $profile;

    }


}
