<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Auth\RequestGuard;
use App\Pentester;

class PentesterController extends Controller
{
    //

    public function bidOnJob(Request $request)
    {
        $price=$request->price;
        $jobID=$request->jobID;
        $clientID=$request->clientID;
        $pentesterID=$request->pentesterID;

        if(Job::where('id',$jobID)->first()->maximum_price>$price)
            {
                $message=new Message;
                $message->pentester_id=$pentesterID;
                $message->from=Pentester::where('id',$pentesterID)->username;
                $message->text=Pentester::where('id',$pentesterID)->username.'just bidded on your
                job.'.$price.Pentester::where('id',$pentesterID)->email;
                $message->pentester_id=$pentesterID;

                $bid=new Bid;
                $bid->amount=$price;
                $bid->job_id=$jobID;

                $bid->save();
                $message->save();


            }
    }


    public function register(Request $request)
    {
     $request->validate([
         'email'    =>'required',
         'password' =>'required',
         'sameaspw'=>'required'
     ]);
 
     if(pentester::where('email', '=', $request->email)->count()>0) {
         return 'This mail already exist';
         }
     if (!strcmp($request->password, $request->sameaspw )) {
         $pentester= new Pentester;
         $pentester->tokens=0;
         $pentester->skills=$request->skills;
         $pentester->username=$request->username;
         $pentester->name=$request->firstname;
         $pentester->lastname=$request->lastname;
         $pentester->email = $request->email;
         $pentester->password = Hash::make($request->password);
         $pentester->remember_token=str_random(100);
         
         $pentester->confirmation_code=str_random(30);
         $this->passwordResetEmail=$request->email;
       
         $confirmation_code=$pentester->confirmation_code;
        
         Mail::send('verify',['confirmation_code'=>$confirmation_code], function($message){
             
             $message->to($this->passwordResetEmail);
             $message->subject('Verify your email');
         
         });
         $pentester->save();
      
      }
     }
 
     public function verifyAccount($token)
     {
         $pentester=Pentester::where('confirmation_code',$token)->first();
         if(!$pentester)
         {
             return "User does not exist";
         }
         $pentester->confirmed=1;
         $pentester->confirmation_code=null;
         $pentester->save();
         return redirect('home');
     }

     public function login(Request $request)
    {

        $email=$request->email;
        $password=$request->password;
        $user=Pentester::where('email',$email)->first();
        if($user)
        {
        if($user->confirmed==false)
        {
            return 'Please verify your account';
        }
        
        if(Auth::guard('pentester')->attempt(['email'=>$email,'password'=>$password]))
        {
            
            $pentester=Auth::guard('pentester')->user();
            $toReturn=['pentester',$pentester];
            
            return $toReturn;
            
        }
        else
        {
           
            return 'Wrong username or password';
                  
        }
       }
      return 'User does not exist';
    }
}
